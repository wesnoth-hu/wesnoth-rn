generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id            String       @id @db.VarChar(16)
  username      String       @unique(map: "user_unique_1") @db.VarChar(100)
  email         String       @unique(map: "user_unique") @db.VarChar(100)
  emailVerified Boolean      @default(false)
  passwordHash  String       @db.VarChar(100)
  mfaEnabled    Boolean      @default(false)
  mfaComplete   Boolean      @default(false)
  race          String       @db.VarChar(100)
  level         Int          @default(1) @db.UnsignedInt
  money         Int          @default(100) @db.UnsignedInt
  status        String       @db.VarChar(100)
  lockedAt      DateTime?    @db.Timestamp(0)
  createdAt     DateTime     @default(now()) @db.Timestamp(0)
  updatedAt     DateTime     @default(now()) @updatedAt @db.Timestamp(0)
  codes         codes[]
  comment       comment[]
  compressed    compressed[]
  media         media[]
  mfa           mfa[]
  post          post[]
  session       session[]
}

model comment {
  id                        String   @id @db.VarChar(16)
  content                   String   @db.VarChar(1000)
  authorID                  String   @db.VarChar(16)
  author                    String   @db.VarChar(100)
  postID                    String   @db.VarChar(16)
  createdAt                 DateTime @default(now()) @db.Timestamp(0)
  updatedAt                 DateTime @default(now()) @db.Timestamp(0)
  post_comment_postIDTopost post     @relation("comment_postIDTopost", fields: [postID], references: [id], onDelete: Cascade, map: "comment_post_FK")
  user                      user     @relation(fields: [authorID], references: [id], onDelete: Cascade, map: "comment_user_FK")

  @@index([postID], map: "comment_post_FK")
  @@index([authorID], map: "comment_user_FK")
}

model post {
  id                           String    @id @db.VarChar(16)
  title                        String?   @db.VarChar(200)
  content                      String    @db.LongText
  authorID                     String    @db.VarChar(16)
  author                       String    @db.VarChar(100)
  published                    Boolean   @default(false)
  draft                        Boolean   @default(true)
  createdAt                    DateTime  @default(now()) @db.Timestamp(0)
  updatedAt                    DateTime  @default(now()) @db.Timestamp(0)
  comment_comment_postIDTopost comment[] @relation("comment_postIDTopost")
  user                         user      @relation(fields: [authorID], references: [id], onDelete: Cascade, map: "post_user_FK")

  @@index([authorID], map: "post_user_FK")
}

model media {
  id         String   @id @db.VarChar(16)
  filename   String   @db.VarChar(200)
  type       String   @db.VarChar(100)
  uploadedBy String   @db.VarChar(16)
  uploadedAt DateTime @default(now()) @db.Timestamp(0)
  user       user     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade, map: "media_user_FK")

  @@index([uploadedBy], map: "media_user_FK")
}

model compressed {
  id         String   @id @db.VarChar(16)
  filename   String   @db.VarChar(100)
  userID     String   @db.VarChar(16)
  uploadedAt DateTime @default(now()) @db.Timestamp(0)
  user       user     @relation(fields: [userID], references: [id], onDelete: Cascade, map: "compressed_user_FK")

  @@index([userID], map: "compressed_user_FK")
}

model codes {
  id        String   @id @db.VarChar(16)
  userID    String   @db.VarChar(16)
  codeType  String   @db.VarChar(20)
  code      String   @db.VarChar(1000)
  used      Boolean  @default(false)
  usedAt    DateTime @default(now()) @db.Timestamp(0)
  expired   Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  user      user     @relation(fields: [userID], references: [id], onDelete: Cascade, map: "codes_user_FK")

  @@index([userID], map: "codes_user_FK")
}

model mfa {
  id        String   @id @db.VarChar(16)
  userID    String   @db.VarChar(100)
  secret    String   @db.VarChar(1000)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  user      user     @relation(fields: [userID], references: [id], onDelete: Cascade, map: "mfa_user_FK")

  @@index([userID], map: "mfa_user_FK")
}

model session {
  id          String   @id @db.VarChar(16)
  userID      String   @db.VarChar(16)
  sessiondata String   @db.VarChar(1000)
  loginAt     DateTime @default(now()) @db.Timestamp(0)
  logoutAt    DateTime @default(now()) @db.Timestamp(0)
  status      String   @db.VarChar(20)
  user        user     @relation(fields: [userID], references: [id], onDelete: Cascade, map: "session_user_FK")

  @@index([userID], map: "session_user_FK")
}
