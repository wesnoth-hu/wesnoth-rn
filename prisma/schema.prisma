generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         String       @id @db.VarChar(16)
  username   String       @unique(map: "user_unique_1") @db.VarChar(100)
  email      String       @unique(map: "user_unique") @db.VarChar(100)
  race       String       @db.VarChar(100)
  level      Int          @default(1) @db.UnsignedInt
  money      Int          @default(100) @db.UnsignedInt
  status     String       @db.VarChar(100)
  createdAt  DateTime     @default(now()) @db.Timestamp(0)
  updatedAt  DateTime     @default(now()) @updatedAt @db.Timestamp(0)
  comment    comment[]
  compressed compressed[]
  media      media[]
  post       post[]
}

model comment {
  id                        String   @id @db.VarChar(16)
  content                   String   @db.VarChar(1000)
  authorID                  String   @db.VarChar(16)
  author                    String   @db.VarChar(100)
  postID                    String   @db.VarChar(16)
  createdAt                 DateTime @default(now()) @db.Timestamp(0)
  updatedAt                 DateTime @default(now()) @db.Timestamp(0)
  post_comment_postIDTopost post     @relation("comment_postIDTopost", fields: [postID], references: [id], onDelete: Cascade, map: "comment_post_FK")
  user                      user     @relation(fields: [authorID], references: [id], onDelete: Cascade, map: "comment_user_FK")

  @@index([postID], map: "comment_post_FK")
  @@index([authorID], map: "comment_user_FK")
}

model post {
  id                           String    @id @db.VarChar(16)
  title                        String?   @db.VarChar(200)
  content                      String    @db.LongText
  authorID                     String    @db.VarChar(16)
  author                       String    @db.VarChar(100)
  published                    Boolean   @default(false)
  draft                        Boolean   @default(true)
  createdAt                    DateTime  @default(now()) @db.Timestamp(0)
  updatedAt                    DateTime  @default(now()) @db.Timestamp(0)
  comment_comment_postIDTopost comment[] @relation("comment_postIDTopost")
  user                         user      @relation(fields: [authorID], references: [id], onDelete: Cascade, map: "post_user_FK")

  @@index([authorID], map: "post_user_FK")
}

model media {
  id         String   @id @db.VarChar(16)
  filename   String   @db.VarChar(200)
  type       String   @db.VarChar(100)
  uploadedBy String   @db.VarChar(16)
  uploadedAt DateTime @default(now()) @db.Timestamp(0)
  user       user     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade, map: "media_user_FK")

  @@index([uploadedBy], map: "media_user_FK")
}

model compressed {
  id         String   @id @db.VarChar(16)
  filename   String   @db.VarChar(100)
  userID     String   @db.VarChar(16)
  uploadedAt DateTime @default(now()) @db.Timestamp(0)
  user       user     @relation(fields: [userID], references: [id], onDelete: Cascade, map: "compressed_user_FK")

  @@index([userID], map: "compressed_user_FK")
}
